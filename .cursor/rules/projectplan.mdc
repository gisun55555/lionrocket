---
alwaysApply: false
---
## 🛠️ 기술 스택

### Frontend
- **Framework**: Next.js 14 (App Router)
- **Language**: TypeScript
- **Styling**: Tailwind CSS
- **State Management**: Zustand
- **Form**: React Hook Form + Zod
- **Icons**: Lucide React
- **HTTP Client**: Fetch API

### Backend
- **Runtime**: Node.js
- **Framework**: Express + TypeScript
- **Database**: SQLite + Prisma ORM
- **Authentication**: JWT
- **File Upload**: Multer
- **AI API**: Claude API (Anthropic)
- **Security**: Helmet, CORS, bcrypt

### Development Tools
- **Package Manager**: npm
- **Linting**: ESLint + Prettier
- **Type Checking**: TypeScript

---

## 🎯 핵심 기능 명세

### 1. 인증 시스템
- **방식**: 이메일 + 비밀번호
- **토큰**: JWT (Access Token)
- **만료시간**: 1시간
- **저장방식**: 메모리 우선 (선택적 localStorage)
- **보안**: bcrypt 해싱, Helmet + CSP

### 2. AI 캐릭터 관리
- **기본 캐릭터**: 3개 제공 (친근한 어시스턴트, 창의적 작가, 기술 전문가)
- **커스텀 캐릭터**: 사용자 생성 가능
  - 이름 설정
  - 프롬프트 정의 
  - 썸네일 이미지 업로드
- **이미지 처리**: PNG/JPEG/WEBP/AVIF, 5MB 제한
- **저장경로**: `uploads/YYYY/MM/hash.ext`

### 3. 채팅 기능
- **메시지 제한**: 200자 이내
- **AI API**: Claude API 연동
- **실시간성**: 로딩 상태 표시
- **대화 관리**: 캐릭터별 독립적 관리
- **데이터 영속성**: 브라우저 새로고침 후 복원

### 4. 데이터 모델
```sql
User (사용자)
├── id: String (PK)
├── email: String (unique)
├── password: String (hashed)
├── name: String
└── timestamps

Character (캐릭터)
├── id: String (PK)
├── name: String
├── prompt: String
├── thumbnail: String? (이미지 URL)
├── isDefault: Boolean
├── userId: String? (FK)
└── timestamps

Message (메시지)
├── id: String (PK)
├── content: String
├── isUser: Boolean
├── userId: String (FK)
├── characterId: String (FK)
└── timestamp
```

---

## 🚀 개발 단계별 계획

### Phase 1: 프로젝트 설정
- [ ] 폴더 구조 생성
- [ ] 프론트엔드 Next.js 설정
- [ ] 백엔드 Express + TypeScript 설정
- [ ] 데이터베이스 Prisma 설정
- [ ] 환경변수 및 Git 설정

### Phase 2: 백엔드 API 개발
- [ ] 데이터베이스 스키마 정의
- [ ] 인증 API (회원가입, 로그인)
- [ ] 캐릭터 CRUD API
- [ ] 메시지 관리 API
- [ ] 이미지 업로드 API
- [ ] Claude API 연동

### Phase 3: 프론트엔드 UI 개발 
- [ ] 로그인/회원가입 페이지
- [ ] 캐릭터 선택 페이지
- [ ] 채팅 인터페이스
- [ ] 캐릭터 생성/편집 모달
- [ ] 상태 관리 구현

### Phase 4: 통합 및 최적화
- [ ] 프론트엔드-백엔드 연동
- [ ] 에러 처리 및 검증
- [ ] 로딩 상태 관리
- [ ] 반응형 디자인
- [ ] 성능 최적화

---

## 📝 API 설계

### Authentication
- `POST /api/auth/register` - 회원가입
- `POST /api/auth/login` - 로그인
- `POST /api/auth/logout` - 로그아웃
- `GET /api/auth/me` - 사용자 정보 조회

### Characters
- `GET /api/characters` - 캐릭터 목록 조회
- `POST /api/characters` - 캐릭터 생성
- `PUT /api/characters/:id` - 캐릭터 수정
- `DELETE /api/characters/:id` - 캐릭터 삭제
- `POST /api/characters/upload` - 썸네일 업로드

### Messages
- `GET /api/messages/:characterId` - 캐릭터별 메시지 조회
- `POST /api/messages/:characterId` - 메시지 전송 (AI 응답 포함)

---

## 🔒 보안 고려사항

1. **입력 검증**: Zod 스키마로 모든 입력 데이터 검증
2. **파일 업로드**: 파일 타입, 크기, 매직넘버 검증
3. **인증**: JWT 토큰 만료 처리, 민감한 API 보호
4. **XSS 방지**: CSP 헤더, HTML 이스케이핑
5. **SQL 인젝션**: Prisma ORM 사용으로 방지
6. **CORS**: 프론트엔드 도메인만 허용

---

## 📊 성능 최적화 방안

1. **이미지**: WebP 변환, 캐시 헤더 설정
2. **API**: 응답 캐싱, 페이지네이션
3. **프론트엔드**: 코드 스플리팅, 이미지 최적화
4. **데이터베이스**: 인덱스 설정, 쿼리 최적화

---




